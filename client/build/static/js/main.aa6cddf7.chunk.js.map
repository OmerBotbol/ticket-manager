{"version":3,"sources":["components/TicketTab.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["TicketTab","props","useState","isDone","setIsDone","visible","setvisible","useEffect","ticket","done","restore","className","title","content","userEmail","Date","creationTime","toUTCString","labels","map","label","i","onClick","changeCounter","event","target","innerText","axios","patch","_id","then","catch","err","console","log","message","Header","id","counter","restoreAll","placeholder","onChange","handleChange","value","App","tickets","setTickets","activeRestore","setCounter","get","ticketsToDisplay","data","SearchedValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.aa6cddf7.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport '../styles/ticketTab.css'\r\n\r\nfunction TicketTab(props) {\r\n    const [isDone, setIsDone] = useState(\"undone\");\r\n    const [visible, setvisible] = useState(true);\r\n\r\n    useEffect(()=>{\r\n        if(props.ticket.done){\r\n            setIsDone(\"done\")\r\n        }\r\n    }, [props.ticket.done])\r\n\r\n    useEffect(()=>{\r\n        if(props.restore === true){\r\n            setvisible(true)\r\n        }\r\n    }, [props.restore])\r\n\r\n    function changeDoneStatus(isDoneStatus){\r\n        if(isDoneStatus === \"undone\"){\r\n            axios.patch(`/api/tickets/${props.ticket._id}/undone`).then(()=>{\r\n                setIsDone(\"undone\")\r\n            }).catch((err)=>{\r\n                console.log(err.message)\r\n            })\r\n        }\r\n        else{\r\n            axios.patch(`/api/tickets/${props.ticket._id}/done`).then(()=>{\r\n                setIsDone(\"done\")\r\n            }).catch((err)=>{\r\n                console.log(err.message)\r\n            })\r\n        }\r\n    }\r\n\r\n    function handleClick(){\r\n        const changedVisible = !visible;\r\n        setvisible(changedVisible);\r\n        props.changeCounter();\r\n    }\r\n    return (\r\n        <>\r\n        {!visible ? <></> :\r\n        <div className={`ticket ${isDone}`}>\r\n            <h3 className=\"ticket-title\">{props.ticket.title}</h3>\r\n            <p className=\"content\">{props.ticket.content}</p>\r\n            <div className=\"ticket-bottom\">\r\n            <div>{props.ticket.userEmail} <span className=\"date\">{new Date(props.ticket.creationTime).toUTCString()}</span></div>\r\n            {props.ticket.labels && \r\n            <div className=\"labels\">\r\n                {props.ticket.labels.map((label, i)=><span key={i} className=\"label\">{label}</span>)}\r\n            </div>\r\n            }\r\n            </div>\r\n            <div className=\"control-buttons\">\r\n                <button className=\"hideTicketButton\" onClick={()=>handleClick()}>hide</button>\r\n                <button className=\"done-status-button\" onClick={(event)=>changeDoneStatus(event.target.innerText)}>{isDone === \"done\" ? <>undone</> : <>done</>}</button>\r\n            </div>\r\n        </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TicketTab\r\n","import React from 'react'\r\nimport '../styles/header.css'\r\n\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div id=\"header\">\r\n            <h1>Ticket Manager</h1>\r\n            {props.counter !== 0 &&\r\n            <div id=\"hide-control\">\r\n                <span id=\"hideTicketsCounter\">{props.counter}</span> tickets hidden\r\n                <button id=\"restoreHideTickets\" onClick={()=> props.restoreAll()}>Restore</button>\r\n            </div>\r\n            }\r\n            <input id=\"searchInput\" placeholder=\"Enter the title you wish to find\" onChange={(event)=>props.handleChange(event.target.value)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport TicketTab from './components/TicketTab'\r\nimport Header from './components/Header';\r\nimport './styles/App.css'\r\n\r\nfunction App() {\r\n  const [tickets, setTickets] = useState([]);\r\n  const [restore, activeRestore] = useState(false);\r\n  const [counter, setCounter] = useState(0);\r\n\r\n  useEffect(() => {\r\n    axios.get('api/tickets').then((ticketsToDisplay)=>{\r\n      setTickets(ticketsToDisplay.data);\r\n    })\r\n  }, [])\r\n\r\n  function handleChange(SearchedValue){\r\n    axios.get(`api/tickets?searchText=${SearchedValue}`).then((ticketsToDisplay)=>{\r\n      setTickets(ticketsToDisplay.data);\r\n    })\r\n  }\r\n\r\n  function changeCounter(){\r\n    setCounter(counter + 1)\r\n    activeRestore(false)\r\n  }\r\n\r\n  function restoreAll(){\r\n    activeRestore(true)\r\n    setCounter(0)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header counter={counter} restoreAll={restoreAll} handleChange={handleChange}/>\r\n      {tickets.map((ticket, i)=>{\r\n      return <TicketTab key={i} ticket={ticket} changeCounter={changeCounter} restore={restore}/>\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}